#+TITLE: Git Workflow
#+AUTHOR: Aaron Kuehler
#+EMAIL:
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: reveal_single_file:t
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_THEME: black
#+REVEAL_TRANS: default

* What is a workflow?

  - A series of steps designed to produce a repeatable outcome

* Goals of VCS Workflow

** Reason-ability

  - Hotfix: What is the state of production?
  - Release: What, exactly, are we about to deploy?
  - Posthumous analysis: What was deployed last week?

** Communication

  - Body of Work -- "These commits are related"
  - Semantic history

** Semantic History

  - History is project metadata
  - History should describe things that code can't
  - History is for others
    - "Tomorrow You" is an other

** Semantic History

  - Intent: What does this changeset hope to accomplish
  - Motivation: The driving business, cultural forces causing the change to happen

** Delivery

  [[./images/shipit.png]]

* Workflow

* Common Sources of Truth

  - Permanent, shared HEAD ref of the repository

** master

  - Canonical view of production state
  - Always stable
  - Change *always*, ultimately, flows *to* here
  - Change *never* originates *from* here

** develop

  - Master + Features going out in next release
  - Should always be in a state from which a release candidate branch can be created for testing

* Common Sources of Truth

  [[./images/main-branches.png]]

* Supporting Branch Types

  - Transient, short-lived

** feature

  - Containment unit for features under construction
  - Branches off from develop
  - Kept up to date with develop by rebasing
  - Merged into develop
  - Naming Convention - feature/feature_name
  - Many branches of this type can exist at any given time

** feature

  [[./images/feature-branches.png]]

** release

  - Staging area for a release candidate
  - Branches off from develop
  - Merged into develop and master
  - Generates a new release Tag on master merge commit
  - Naming Convention - release/yyyy-mm-dd
  - One and only one branch of this type can exist at any given time

** release

  [[./images/release-branches.png]]

** hotfix

  - Containment unit for a fix to an issue found in production
  - Branches off from master
  - Merged into develop and master
  - Generates a new release Tag on master merge commit
  - Naming Convention - hotfix/defect_id_and_description
  - Many branches of this type can exist at any given time

** hotfix

  [[./images/hotfix-branches.png]]

* Workflow

  [[./images/gitflow.png]]

* Resources

  - https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows
  - http://nvie.com/posts/a-successful-git-branching-model/
